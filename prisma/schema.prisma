// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model customers {
  customerNumber   Int      @id @default(autoincrement())
  customerName     String
  contactLastName  String
  contactFirstName String
  phone            String
  addressLine1     String
  addressLine2     String?
  city             String
  state            String?
  postalCode       String?
  country          String
  salesRepEmployeeNumber Int?
  creditLimit      Float?
  employees employees? @relation("sales_rep_employee", fields: [salesRepEmployeeNumber], references: [employeeNumber])
  orders orders[] @relation("orders_ibfk_1")
  payments payments[] @relation("payments_ibfk_1")
}

model employees {
  employeeNumber   Int      @id @default(autoincrement())
  lastName         String
  firstName        String
  extension        String
  email            String
  officeCode       String
  reportsTo        Int?
  jobTitle         String
  customers      customers[] @relation("sales_rep_employee")
  subordinates     employees[] @relation("employees_ibfk_1")
  manager          employees?  @relation("employees_ibfk_1", fields: [reportsTo], references: [employeeNumber])
  offices offices? @relation("employees_ibfk_2", fields: [officeCode], references: [officeCode])

}

model offices {
  officeCode       String   @id
  city             String
  phone            String
  addressLine1     String
  addressLine2     String?
  state            String?
  country          String
  postalCode       String
  territory        String
  employees employees[] @relation("employees_ibfk_2")
}

model orders {
  orderNumber      Int      @id
  orderDate        DateTime
  requiredDate     DateTime
  shippedDate      DateTime?
  status           String
  comments         String?
  customerNumber   Int
  orderdetails orderdetails[] @relation("orderdetails_ibfk_1")
  customers customers? @relation("orders_ibfk_1", fields: [customerNumber], references: [customerNumber])
}

model orderdetails {
  orderNumber      Int
  productCode      String
  quantityOrdered  Int
  priceEach        Float
  orderLineNumber Int
  orders orders? @relation("orderdetails_ibfk_1", fields: [orderNumber], references: [orderNumber])
  products products? @relation("orderdetails_ibfk_2", fields: [productCode], references: [productCode])
  @@id([orderNumber, productCode])
}

model payments {
  customerNumber Int
  checkNumber String
  paymentDate DateTime
  amount Float
  @@id([customerNumber, checkNumber])
  customers customers? @relation("payments_ibfk_1", fields: [customerNumber], references: [customerNumber])

}

model productlines {
  productLine String @id
  textDescription String
  htmlDescription String
  image Bytes
  products products[] @relation("products_ibfk_1")
}

model products {
  productCode      String   @id
  productName      String
  productLine      String
  productScale     String
  productVendor    String
  productDescription String
  quantityInStock  Int
  buyPrice         Float
  MSRP             Float
  orderdetails orderdetails[] @relation("orderdetails_ibfk_2")
  productlines productlines? @relation("products_ibfk_1", fields: [productLine], references: [productLine])
}